export const svgElements=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hatch","hatchpath","hkern","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","solidcolor","stop","style","svg","switch","symbol","text","textPath","title","tref","tspan","unknown","use","view","vkern"];export class Binding{constructor(e,t){this._state=e,this._setter=t,this._prop=""}hasStateElement(e){for(const t in this._state._bindings)if(t instanceof e)return!0;return!1}hasElementSelf(){for(const e in this._state._bindings)return this._state._bindings.get(e).includes(this)}addSelfToElement(e){this.hasElementSelf(e)||(this._state._bindings.get(e).push(this),this._state.update())}set(e,t){if(this._prop.includes(".")){const s=this._prop.split(".");t[s[0]][s[1]]=e}else t instanceof SVGElement&&!this._prop.startsWith("on")?t.setAttribute(this._prop,e):t[this._prop]=this._setter(e)}}export class State{constructor(e){this._value=null,this._bindings=new Map,this.value=e}update(){for(const e of this._bindings)for(const t of e[1])t.set(this.value,e[0])}set value(e){this._value=e,this.update()}get value(){return this._value}bind(e=(e=>e)){return new Binding(this,e)}}export const valueOf=e=>new State(e);export class ListBinding extends Binding{constructor(e,t){super(e,(e=>e)),this._each=t}requestViewUpdate(){const e=[];for(const t of this._state.value)e.push(t);for(const t of this._state._listBindings)if(t[1]===this)for(let s=0;s<e.length;s++)t[0].appendChild(this._each(e[s][1],e[s][0]))}}export class ListState extends State{constructor(...e){super(new Map),this._idIncrement=0,this._listBindings=new Map;for(const t of e)this.add(t)}getPairs(){const e=[];for(const[t,s]of this.value)e.push([t,s]);return e}requestViewUpdate(){for(const e of this._listBindings)e[0].appendChild(e[1]._each(this.value.get(this._idIncrement),this._idIncrement))}add(e){this.set(++this._idIncrement,e),this.requestViewUpdate()}set(e,t){this.value.set(e,t)}push(...e){for(const t of e)this.add(t)}get(e){this._value.get(e)}getAt(e){this.get(this.getPairs()[e][0])}remove(e){let t=[];for(const e of this.value)t.push(e[0]);for(let s=0;s<t.length;s++)if(t[s]===e){for(const t of this._listBindings)this.value.delete(e),t[0].removeChild(t[0].children.item(s));break}0===this.value.size&&(this._idIncrement=0)}removeAt(e){this.remove(this.getPairs()[e][0])}pop(){this.remove(this.getPairs()[this.getPairs().length-1][0])}bindEach(e=((e,t)=>e)){return new ListBinding(this,e)}}export const listOf=(...e)=>new ListState(...e);export const mapOf=e=>{const t={};for(const i in e)t[i]=(s=e[i],new State(s));var s;return t};export const $=(e="div",t={},s=[])=>{const i=e.split(".");let n=i[0];if(i.splice(0,1),n.includes("#")){const e=n.split("#");""===e[0]?n="div":(n=e[0],t.id=e[1])}t.className=t.className??[];for(const e of i)e.includes("#")||t.className.push(e);t.className=t.className.join(" "),""===t.className&&delete t.className;let o=null;svgElements.includes(n)?svgElements.includes(n)&&(o=document.createElementNS("http://www.w3.org/2000/svg",n)):o=document.createElement(n);for(const e in t)if(t[e]instanceof Binding)bindToEl(t[e],o,e);else if("style"===e&&"object"==typeof t[e]){const s=t[e];for(const i in s)s[i]instanceof Binding?bindToEl(t[e][i],o,`${e}.${i}`):o[e][i]=s[i]}else t[e]instanceof Binding||(o instanceof SVGElement&&!e.startsWith("on")?o.setAttribute(e,t[e]):o[e]=t[e]);if(s instanceof ListBinding)s._state._listBindings.set(o,s),s.requestViewUpdate();else for(const e of s)if(e instanceof HTMLElement)o.appendChild(e);else if(e instanceof SVGElement)o.appendChild(e);else{const t=document.createTextNode(e);o.appendChild(t),e instanceof Binding&&bindToEl(e,t,"textContent")}return o};const bindToEl=(e,t,s)=>{e.hasStateElement(t)||(e._state._bindings.set(t,[]),e._prop=s),e.addSelfToElement(t)};